
## Indexing & logic: Strings
<hr>
  <br>
  <p>The tidyverse has a packages `stringr` that is useful for querying strings.</p>
  <br>
  
  ```{r load fruits, eval = FALSE} 
library(tidyverse)
library(stringr)

fruit

# Query the first five fruits by index:

fruit[1:5]

```

## Indexing & logic: Strings
<hr>
  <p>Which fruits are apples?</p>
  ```{r fruit by full name, eval = FALSE} 
# Which position in the fruit vector is apple?

fruit == 'apple'

which(fruit == 'apple')

# Subsetting to fruits named "apple" by position ...

fruit[1]

fruit[which(fruit == 'apple')]

# ... is equivalent to subsetting by condition:

fruit[fruit == 'apple']
```

## Indexing & logic: Strings
<hr>
  <p>Extract characters from strings using `str_sub`.</p>
  ```{r hello world str_sub, eval = FALSE}
# Subset "hello world" to just "hello":

str_sub('hello world', start = 1, end = 5)

# Subset to just "world":

str_sub('hello world', start = 7, end = 12)

# You actually don't have to specify the end point here:

str_sub('hello world', start = 7)

# You can also count from the end:

str_sub('hello world', start = -5)

```

## Indexing & logic: Strings
<hr>
  <p>`str_sub` can be used for smart queries of strings. For example, which fruits start with the letter "a"?</p>
  
  ```{r fruit by str_sub, eval = FALSE} 

# str_sub can be used to examine the first letter of each value:

str_sub(fruit, start = 1, end = 1)

str_sub(fruit, start = 1, end = 1) == 'a'

which(str_sub(fruit, start = 1, end = 1) == 'a')

# Subsetting to fruits with 7 characters by index or condition:

fruit[1:3]

fruit[which(str_sub(fruit, start = 1, end = 1) == 'a')]

fruit[str_sub(fruit, start = 1, end = 1) == 'a']
```

## Indexing & logic: Strings
<hr>
  <p>We can also query by the number of characters (i.e., symbols, numbers, or letters) in the string. For example, perhaps we're not interested in "apple" but rather any fruit that has five letters:</p>

```{r fruit by str_count, eval = FALSE} 

# str_count can be used to determine the number of letters
# or symbols in a string:

fruit

str_count(fruit)

# Which fruits have exactly 5 letters?

str_count(fruit) == 5

which(str_count(fruit) == 5)
```

## Indexing & logic: Strings
<hr>
<p>We can also query by the number of characters (i.e., symbols, numbers, or letters) in the string. For example, perhaps we're not interested in "apple" but rather any fruit that has five letters:</p>
  
  ```{r fruit by str_count 2, eval = FALSE} 
# Subsetting to fruits with 5 characters by index ...

fruit[c(1,34,36,44,49,53,58)]

# ... is equivalent to ...

fruit[which(str_count(fruit) == 5)]

# ... and is also equivalent to subsetting by condition:

fruit[str_count(fruit) == 5]
```

## Indexing & logic: Strings
<hr>
  <p>`str_detect` is a logical test of whether a provided pattern is present in a target value. For example, we might explore the example phrase "hello world" as such:</p>
  
  ```{r hello world str_detect, eval = FALSE} 
# Detecting a pattern within a string:

str_detect('hello world', pattern = 'hello')

str_detect('hello world', pattern = 'ello')

str_detect('hello world', pattern = 'lo wo')

str_detect('hello world', pattern = 'world')

str_detect('hello world', pattern = "foo")

str_detect('hello world', pattern = 'helloworld')

```

## Indexing & logic: Strings
<hr>
  <p>How many fruits contain the word apple?</p>
  ```{r fruit by str_detect, eval = FALSE} 
# Which fruits contain the pattern "apple"?

str_detect(fruit, 'apple')

which(str_detect(fruit, 'apple'))

# Subsetting to fruits with the pattern "apple" by index ...

fruit[c(1,62)]

fruit[which(str_detect(fruit, 'apple'))]

# ... and is also equivalent to subsetting by condition:

fruit[str_detect(fruit, 'apple')]
```

## Summarizing and queries
<hr>
  <p>Querying with indexing and logic can be a great way to summarize your data.</p>
  
  ```{r dummy data minMax, eval = FALSE}

# Make a dummy data frame:

dummyData <-  
  data.frame(
    gen = c('a', 'b', 'a', 'c', 'b'),
    n = c(3,5,8,13, 21))

dummyData

# Basic summary of the dummy data frame:

summary(dummyData)

```

## Summarizing and queries
<hr>
  <p>We often want to see summary values associated with treatment levels. Let's explore querying `dummyData` by maximum and minimum values:</p>

```{r dummy data minMax subset, eval = FALSE}

# Subset to maximum and minimum values, returning separate results:

dummyData[dummyData$n == min(dummyData$n),]

dummyData[dummyData$n == max(dummyData$n),]

# Subset to maximum and minimum n values, returning both
# results in one frame:

dummyData[dummyData$n == min(dummyData$n)|
            dummyData$n == max(dummyData$n),]

```

## Summarizing and queries
<hr>
<p>Provide the minimum value of n for treatment level "a". We might address this as:</p>

```{r dummy data minMax subset extract, eval = FALSE}

# Subset to group "a":

dummyData[dummyData$gen == 'a',]

# As a data frame, we can pull out the second column using indexing ...

dummyData[dummyData$gen == 'a',2]

# ... or by name (my preference):

dummyData[dummyData$gen == 'a',]$n


# We can then calculate the minimum value in group "a" as:

min(dummyData[dummyData$gen == 'a',]$n)

```

## Practice with real data
<hr>
<p>We will practice on an example data frame built in to the tidyverse package. The data provided are the size of the human population, by country, from 1995 to 2013 (source: World Health Organization's Tuberculosis Report, see http://www.who.int/tb/country/data/download/en/). Let's first load and explore the data:</p>
<br>

```{r tb data load, eval = FALSE}

# Load WHO's TB dataset:
  
  population
```

## Practice with real data
<hr>
  <p>Let's explore the population of the United States. We'll start by subsetting the data to records where the "country" value is the "United States".</p>
  <br>
  ```{r us population data fail, eval = FALSE}

# Subset population data to the United States:

population[population$country == 'United States', ]

```

## Practice with real data
<hr>
  ```{r us population United query, eval = FALSE}

# What are the country names?

unique(population$country)

# Which of these countries contain the pattern "United"?

str_detect(unique(population$country), 'United')

unique(population$country)[str_detect(unique(population$country),
                                      'United')]

# They call the United States "United States of America", so 
# the query could be written as:

population[population$country == 'United States of America',]

```

## Practice with real data
<hr>
  <p>Perhaps you are interested in what the population of the United States was in 2004. Query the data to the year 2004 and return the population size, as below:</p>
  ```{r us population 2004, eval = FALSE}

# To determine the size of a population in 2004:

population[population$year == 2004,]

# Therefore, the data frame reduced to the population 
# of the United States in 2004:

population[population$country == 'United States of America' &
             population$year == 2004,]

# To return just the population information:

population[population$country == 'United States of America' & 
             population$year == 2004,]$population

```

## Practice with real data
<hr>
  <p>In what years was the population of the United States greater than 300 million?</p>  
  ```{r us population greater than 300M, eval = FALSE}

# Subset the population data frame to records with a 
# population of greater than 300 million:

population[population$population > 300000000,]

# Repeat the above, but subset the records to the United States:

population[population$country == 'United States of America' &
             population$population > 300000000,]

# To return just the years:

population[population$country == 'United States of America' &
             population$population > 300000000, ]$year

```

## Practice with real data
<p><b>Now you</b>! Use the population dataset to explore the following questions:</p>
  <br>
  
  <ol>
  <li>What was the population of Palau in 2005?</li>
  <li>Which countries had a population of less than 10,000 in 2013?</li>
  <li>Which country had the smallest population in 2005?</li>
  <li>What was the population of the United Kingdom in 2008?</li>
  </ol>