{
    "collab_server" : "",
    "contents" : "library(rhandsontable)\nlibrary(shiny)\nlibrary(stringi)\n\n\n# seed data frames --------------------------------------------------------\n\nvisit1 <- data_frame(\n  `<b>Site:</b>` = vector('character', length = 1),\n  `<b>Longitude:</b>` = vector('numeric', length = 1),\n  `<b>Latitude:</b>` = vector('numeric', length = 1),\n  `<b>Accuracy:</b>` = vector('integer', length = 1)\n)\n\nvisit2 <- data_frame(\n  `<b>Date:</b>` = vector('character', length = 1),\n  `<b>Observer(s):</b>` = vector('character', length = 1),\n  `<b>Engagement:</b>` = vector('integer', length = 1),\n  `<b>Encountered birds?</b>` = vector('character', length = 1)\n)\n\nnetEffort <- data_frame(\n  `<b>Net length:</b>` = c('6 m', '9 m', '12 m', '18 m'),\n  `<b>Total time open (minutes):</b>` = vector('integer', length = 4)\n)\n\nvisitNotes <- data_frame(\n  `<b>Visit notes:</b>` = vector('character', length = 1)\n)\n\ncapture <- data_frame(\n  `<b>time</b>` = vector('character', length = 8),\n  `<b>obs</b>` = vector('character', length = 8),\n  `<b>enc</b>` = vector('character', length = 8),\n  `<b>spp</b>` = vector('character', length = 8),\n  `<b>prefix</b>` = vector('character', length = 8),\n  `<b>suffix</b>` = vector('character', length = 8),\n  `<b>cLeft</b>` = vector('character', length = 8),\n  `<b>cRight</b>` = vector('character', length = 8),\n  `<b>mass</b>` = vector('numeric', length = 8),\n  `<b>wing</b>` = vector('numeric', length = 8),\n  `<b>tail</b>` = vector('numeric', length = 8),\n  `<b>age</b>` = vector('character', length = 8),\n  `<b>sex</b>` = vector('character', length = 8),\n  `<b>cp/bp</b>` = vector('character', length = 8),\n  `<b>fat</b>` = vector('character', length = 8),\n  `<b>sample IDs</b>` = vector('character', length = 8),\n  `<b>notes</b>` = vector('character', length = 8)\n)\n\ncapture0 <- data_frame(\n  `<b>time</b>` = vector('character', length = 0),\n  `<b>obs</b>` = vector('character', length = 0),\n  `<b>enc</b>` = vector('character', length = 0),\n  `<b>spp</b>` = vector('character', length = 0),\n  `<b>bandPre</b>` = vector('character', length = 0),\n  `<b>bandSuff</b>` = vector('character', length = 0),\n  `<b>left</b>` = vector('character', length = 0),\n  `<b>right</b>` = vector('character', length = 0),\n  `<b>mass</b>` = vector('numeric', length = 0),\n  `<b>wing</b>` = vector('numeric', length = 0),\n  `<b>tail</b>` = vector('numeric', length = 0),\n  `<b>age</b>` = vector('character', length = 0),\n  `<b>sex</b>` = vector('character', length = 0),\n  `<b>cp/bp</b>` = vector('character', length = 0),\n  `<b>fat</b>` = vector('character', length = 0),\n  `<b>sample IDs</b>` = vector('character', length = 0),\n  `<b>notes</b>` = vector('character', length = 0)\n)\n\nforay <- data_frame(\n  `Observer` = vector('character', length = 4),\n  `Foray #` = vector('integer', length = 4),\n  `Start time` = vector('character', length = 4),\n  `End time` = vector('character', length = 4),\n  `Path dist` = vector('integer', length = 4)\n)\n\ncountUnbanded <- data_frame(\n  `Species` = vector('character', length = 4),\n  `Count` = vector('integer', length = 4)\n)\n\ntechResights <- data_frame(\n  `Observer` = vector('character', length = 5), \n  `Time` = vector('character', length = 5), \n  `Foray #` = vector('integer', length = 5),\n  `prefix` = vector('character', length = 5),\n  `suffix` = vector('character', length = 5),\n  `Longitude (dd.dddd)` = vector('numeric', length = 5),\n  `Latitude (dd.dddd)` = vector('numeric', length = 5),\n  `Resight type` = vector('character', length = 5),\n  `Notes` = vector('character', length = 5)\n)\n\npCountMeta <- data_frame(\n  `Site` = vector('character', length = 1),\n  `Observer` = vector('character', length = 1),\n  `Date` = vector('character', length = 1),\n  `Start time` = vector('character', length = 1)\n)\n\npCount <- data_frame(\n  `Interval` = rep(1, 15),\n  `Species` = vector('character', length = 15),\n  `Dist < 10` = vector('integer', length = 15),\n  `Dist 10-20` = vector('integer', length = 15),\n  `Dist 20-30` = vector('integer', length = 15),\n  `Dist 30-40` = vector('integer', length = 15),\n  `Dist 40-50` = vector('integer', length = 15),\n  `Detection` = vector('character', length = 15)\n)\n\n\n# possible values ---------------------------------------------------------\n\nnnSpecies <- \n  c(\n    'AMRO', 'BCCH','BRTH', 'CACH', 'CARW', 'GRCA', 'HOWR', 'NOCA',\n    'NOMO', 'SOSP'\n  )\n\nchoiceSpecies <- nnSpecies\n\nchoice_techs <- \n  expand.grid(\n    list(LETTERS[1:26], LETTERS[1:26], LETTERS[1:26]),\n    stringsAsFactors = FALSE\n  ) %>%\n  unite(col = combinedCol, 1:3, sep  = '') %>%\n  .$combinedCol\n\n\ntimeOfDay <-\n  data.frame(time = format(seq(\n    ISOdate(2000, 1, 1), ISOdate(2000, 1, 2), by = 'min'\n  ), '%H:%M')) %>%\n  distinct %>%\n  arrange(time) %>%\n  slice(301:1321) %>%\n  .$time\n\ncolor_renderer <- \"\n  function(instance, td) {\n    Handsontable.renderers.TextRenderer.apply(this, arguments);\n    td.style.size = 20;\n  }\n\"\n\n\noutfilename=\"test_table\"\n\noutdir=getwd()\n\n\n# ui ----------------------------------------------------------------------\n\nui <-\n  shinyUI(\n    navbarPage(\n      'Neighborhood Nestwatch Data Entry Interface',\n      \n      # Visit data --------------------------------------------------------\n      \n      tabPanel(\n        'Visit and capture information',\n        fixedPage(\n          fixedRow(\n            column(10, offset = 1,\n                   HTML('<h3><b>Visit table</b></h3>')),\n            column(1, '')\n          ),\n          fixedRow(\n            column(10, offset = 1,\n                   rHandsontableOutput(\"hot_visit1\")),\n            column(1, '')\n          ),\n          fixedRow(\n            column(10, offset = 1,\n                   rHandsontableOutput(\"hot_visit2\")),\n            column(1, '')\n          ),\n          br(),\n          fixedRow(\n            column(4, offset = 1, rHandsontableOutput('hot_netEffort'), style = 'padding-right: 0; margin-right: 0;'),\n            column(7, rHandsontableOutput('hot_visitNotes'),style = 'padding-left: 0; margin-left: 0;'),\n            column(1, '')\n          ),\n          br(),\n          fixedRow(\n            column(5, offset = 1, actionButton('submit_visit',\n                                               'Submit visit information',\n                                               class = 'btn-primary')),\n            column(6, '')\n          ),\n          hr(),\n          fixedRow(\n            column(10, offset = 1,\n                   HTML('<h3><b>Capture table</b></h3>')),\n            column(1, '')\n          ),\n          fixedRow(\n            column(10, offset = 1, rHandsontableOutput('hot_capture')),\n            column(1, '')\n          ),\n          br(),\n          fixedRow(\n            column(5, offset = 1, actionButton('submit_capture',\n                                               'Submit capture information',\n                                               class = 'btn-primary')),\n            column(6, '')\n          ),\n          br()\n        )),\n      \n      # Resight foray data --------------------------------------------------\n      \n      tabPanel(\n        'Resight foray',\n        fixedPage(\n          fixedRow(\n            column(\n              7,\n              offset = 1,\n              style = 'padding-right: 0; margin-right: 0;',\n              HTML('<h3><b>Time and distance</b></h3>')\n            ),\n            column(\n              4,\n              offset = 0,\n              style = 'padding-left: 15; margin-left: 15;',\n              HTML('<h3><b>Unbanded focal species</b></h3>')\n            )\n          ),\n          fixedRow(\n            column(7, offset = 1, rHandsontableOutput(\"hot_foray\"), style = 'padding-right: 0; margin-right: 0;'),\n            column(4, offset = 0, rHandsontableOutput(\"hot_countUnbanded\"), style = 'padding-left: 15; margin-left: 15;')\n          ),\n          br(),\n          fixedRow(\n            column(7, offset = 1, actionButton('submit_foray',\n                                               'Submit foray time and distance',\n                                               style = 'margin-right: 0;',\n                                               class = 'btn-primary')),\n            column(4, offset = 0, actionButton('submit_countUnbanded',\n                                               ' Submit observations of unbanded focal species',\n                                               style = 'margin-left: 15;',\n                                               class = 'btn-primary'))\n          ),\n          hr(),\n          fixedRow(\n            column(11, offset = 1, HTML('<h3><b>Resighted banded birds by technician</b></h3>'))\n          ),\n          fixedRow(\n            column(11, offset = 1, rHandsontableOutput(\"hot_techResights\"))\n          ),\n          br(),\n          fixedRow(\n            column(11, offset = 1, actionButton('submit_techResights',\n                                                'Submit technician resights',\n                                                class = 'btn-primary'))\n          ),\n          br()\n        )\n      ),\n      \n      # Point counts ------------------------------------------------------\n      \n      tabPanel('Point count',\n               fixedPage(\n                   fixedRow(\n                     column(10, offset = 1,\n                            HTML('<h3><b>Point count metadata</b></h3>')),\n                     column(1, '')\n                   ),\n                   fixedRow(\n                     column(10, offset = 1,\n                            rHandsontableOutput(\"hot_pCountMeta\")),\n                     column(1, '')\n                   ),\n                   br(),\n                   fixedRow(\n                     column(11, offset = 1, actionButton('submit_pointCountMeta',\n                                                         'Submit point count metadata',\n                                                         class = 'btn-primary'))\n                   ),\n                   hr(),\n                   fixedRow(\n                     column(10, offset = 1,\n                            HTML('<h3><b>Point count</b></h3>')),\n                     column(1, '')\n                   ),\n                   fixedRow(\n                     column(10, offset = 1,\n                            rHandsontableOutput(\"hot_pCount\")),\n                     column(1, '')\n                   ),\n                   br(),\n                   fixedRow(\n                     column(11, offset = 1, actionButton('submit_pointCount',\n                                                         'Submit point count',\n                                                         class = 'btn-primary'))\n                   ),\n                   br()\n               )\n               )\n      ))\n\n\n\n# server ------------------------------------------------------------------\n\nserver <- shinyServer(function(input, output) {\n  \n  #------------------------------------------------------------------------*\n  # ---- reactive values ----\n  #------------------------------------------------------------------------*\n  \n  values <- reactiveValues()\n  \n  # Visit metadata, first line:\n  \n  observe({\n    if (!is.null(input$hot_visit1)) {\n      visit1 <- hot_to_r(input$hot_visit1)\n    } else {\n      if(is.null(values[['visit1']]))\n        visit1 <- visit1\n      else\n        visit1 <- values[[\"visit1\"]]\n    }\n    values[['visit1']] <- visit1\n  })\n  \n  # Visit metadata, second line:\n  \n  observe({\n    if (!is.null(input$hot_visit2)) {\n      visit2 <- hot_to_r(input$hot_visit2)\n    } else {\n      if(is.null(values[['visit2']]))\n        visit2 <- visit2\n      else\n        visit2 <- values[[\"visit2\"]]\n    }\n    values[['visit2']] <- visit2\n  })\n  \n  # Net effort:\n  \n  observe({\n    if (!is.null(input$hot_netEffort)) {\n      netEffort <- hot_to_r(input$hot_netEffort)\n    } else {\n      if(is.null(values[['netEffort']]))\n        netEffort <- netEffort\n      else\n        netEffort <- values[[\"netEffort\"]]\n    }\n    values[['netEffort']] <- netEffort\n  })\n  \n  # Visit notes:\n  \n  observe({\n    if (!is.null(input$hot_visitNotes)) {\n      visitNotes <- hot_to_r(input$hot_visitNotes)\n    } else {\n      if(is.null(values[['visitNotes']]))\n        visitNotes <- visitNotes\n      else\n        visitNotes <- values[[\"visitNotes\"]]\n    }\n    values[['visitNotes']] <- visitNotes\n  })\n  \n  # Captures:\n  \n  observe({\n    if (!is.null(input$hot_capture)) {\n      capture <- hot_to_r(input$hot_capture)\n    } else {\n      if(is.null(values[['capture']]))\n        capture <- capture\n      else\n        capture <- values[[\"capture\"]]\n    }\n    values[['capture']] <- capture\n  })\n  \n  # Foray metadata:\n  \n  observe({\n    if (!is.null(input$hot_foray)) {\n      foray <- hot_to_r(input$hot_foray)\n    } else {\n      if(is.null(values[['foray']]))\n        foray <- foray\n      else\n        foray <- values[[\"foray\"]]\n    }\n    values[['foray']] <- foray\n  })\n  \n  # Foray count unbanded:\n  \n  observe({\n    if (!is.null(input$hot_countUnbanded)) {\n      countUnbanded <- hot_to_r(input$hot_countUnbanded)\n    } else {\n      if(is.null(values[['countUnbanded']]))\n        countUnbanded <- countUnbanded\n      else\n        countUnbanded <- values[[\"countUnbanded\"]]\n    }\n    values[['countUnbanded']] <- countUnbanded\n  })\n  \n  # Foray resights:\n  \n  observe({\n    if (!is.null(input$hot_techResights)) {\n      techResights <- hot_to_r(input$hot_techResights)\n    } else {\n      if(is.null(values[['techResights']]))\n        techResights <- techResights\n      else\n        techResights <- values[[\"techResights\"]]\n    }\n    values[['techResights']] <- techResights\n  })\n  \n  # Point count metadata:\n  \n  observe({\n    if (!is.null(input$hot_pCountMeta)) {\n      pCountMeta <- hot_to_r(input$hot_pCountMeta)\n    } else {\n      if(is.null(values[['pCountMeta']]))\n        pCountMeta <- pCountMeta\n      else\n        pCountMeta <- values[[\"pCountMeta\"]]\n    }\n    values[['pCountMeta']] <- pCountMeta\n  })\n  \n  # Point count:\n  \n  observe({\n    if (!is.null(input$hot_pCount)) {\n      pCount <- hot_to_r(input$hot_pCount)\n    } else {\n      if(is.null(values[['pCount']]))\n        pCount <- pCount\n      else\n        pCount <- values[[\"pCount\"]]\n    }\n    values[['pCount']] <- pCount\n  })\n  \n  #------------------------------------------------------------------------*\n  # ---- outputs ----\n  #------------------------------------------------------------------------*\n  \n  # Visit, first line -----------------------------------------------------\n  \n  output$hot_visit1 <- renderRHandsontable({\n    visit1 <- values[['visit1']]\n    if(!is.null(visit1)){\n      rhandsontable(visit1, rowHeaders = NULL) %>%\n        hot_table(highlightRow = TRUE) %>%\n        hot_cols(colWidths = c(360,200,200,180),\n                 halign = 'htCenter',\n                 valign = 'htMiddle',\n                 renderer = color_renderer) %>%\n        hot_rows(rowHeights = 40)\n    }\n  })\n  \n  # Visit, second line ----------------------------------------------------\n  \n  output$hot_visit2 <- renderRHandsontable({\n    visit2 <- values[['visit2']]\n    if(!is.null(visit2)){\n      rhandsontable(visit2, rowHeaders = NULL) %>%\n        hot_table(highlightRow = TRUE) %>%\n        hot_cols(colWidths = c(360,200,200,180),\n                 halign = 'htCenter',\n                 valign = 'htMiddle',\n                 renderer = color_renderer) %>%\n        hot_rows(rowHeights = 40)# %>%\n        # hot_col(`Encountered Birds?`, type = \"dropdown\", source = c('Y', 'N'))\n    }\n  })\n  \n  # Net effort ------------------------------------------------------------\n  \n  output$hot_netEffort <- renderRHandsontable({\n    netEffort <- values[['netEffort']]\n    if(!is.null(netEffort)){\n      rhandsontable(netEffort, rowHeaders = NULL) %>%\n        hot_table(highlightRow = TRUE) %>%\n        hot_cols(colWidths = c(100,270),\n                 halign = 'htCenter',\n                 valign = 'htMiddle',\n                 renderer = color_renderer) %>%\n        hot_rows(rowHeights = 40)\n    }\n  })\n  \n  # Visit notes -----------------------------------------------------------\n  \n  output$hot_visitNotes <- renderRHandsontable({\n    visitNotes <- values[['visitNotes']]\n    if(!is.null(visitNotes)){\n      rhandsontable(visitNotes, rowHeaders = NULL) %>%\n        hot_table(highlightRow = TRUE) %>%\n        hot_cols(colWidths = 565,\n                 halign = 'htCenter',\n                 valign = 'htMiddle',\n                 renderer = color_renderer) %>%\n        hot_rows(rowHeights = 160)\n    }\n  })\n  \n  # Capture ---------------------------------------------------------------\n  \n  output$hot_capture <- renderRHandsontable({\n    capture <- values[['capture']]\n    if(!is.null(capture)){\n      rhandsontable(capture, rowHeaders = NULL) %>%\n        hot_table(highlightRow = TRUE) %>%\n        hot_cols(colWidths = c(50,40,35,75,   # ... - spp\n                               50,80,50,50,   # prefix - cRight\n                               50,50,50,      # mass - tail\n                               40,40,50, 30,  # age - fat\n                               100, 100),     # sample IDs - ...\n                 halign = 'htCenter',\n                 valign = 'htMiddle',\n                 renderer = color_renderer) %>%\n        hot_rows(rowHeights = 40) # %>%\n        # hot_col('sex', type = \"dropdown\", source = c('F', 'M','U'))\n    }\n  })\n  \n  # Foray -----------------------------------------------------------------\n  \n  output$hot_foray <- renderRHandsontable({\n    foray <- values[['foray']]\n    if(!is.null(foray)){\n      rhandsontable(foray) %>%\n        hot_table(highlightRow = TRUE) %>%\n        hot_cols(colWidths = c(80,60, 100, 100, 100),\n                 halign = 'htCenter',\n                 valign = 'htMiddle',\n                 renderer = color_renderer) %>%\n        hot_col('Start time', type = \"dropdown\", source = timeOfDay) %>%\n        hot_col('End time', type = \"dropdown\", source = timeOfDay) %>%\n        hot_validate_numeric('Path dist', min = 0, max = 10000) %>%\n        hot_rows(rowHeights = 40)\n    }\n  })\n  \n  # Count unbanded --------------------------------------------------------\n  \n  output$hot_countUnbanded <- renderRHandsontable({\n    countUnbanded <- values[['countUnbanded']]\n    if(!is.null(countUnbanded)){\n      rhandsontable(countUnbanded) %>%\n        hot_table(highlightRow = TRUE) %>%\n        hot_cols(colWidths = c(100,100),\n                 halign = 'htCenter',\n                 valign = 'htMiddle',\n                 renderer = color_renderer) %>%\n        hot_validate_numeric('Count', min = 0, max = 100) %>%\n        hot_col('Species', type = \"dropdown\", source = nnSpecies) %>%\n        hot_rows(rowHeights = 40)\n    }\n  })\n  \n  # Tech resights ---------------------------------------------------------\n  \n  output$hot_techResights <- renderRHandsontable({\n    techResights <- values[['techResights']]\n    if(!is.null(techResights)){\n      rhandsontable(techResights) %>%\n        hot_table(highlightRow = TRUE) %>%\n        hot_cols(\n          colWidths = c(80, 100, 50,50, 75, 120, 120, 70, 295),\n          halign = 'htCenter',\n          valign = 'htMiddle',\n          renderer = color_renderer) %>%\n        hot_rows(rowHeights = 40) %>%\n        hot_col('Resight type', type = \"dropdown\", source = c('F', 'I'))\n    }\n  })\n  \n  # Point count metadata --------------------------------------------------\n  \n  output$hot_pCountMeta <- renderRHandsontable({\n    pCountMeta <- values[['pCountMeta']]\n    if(!is.null(pCountMeta)){\n      rhandsontable(pCountMeta, rowHeaders = NULL) %>%\n        hot_table(highlightRow = TRUE) %>%\n        hot_cols(\n          colWidths = c(250,200,250,200),\n          halign = 'htCenter',\n          valign = 'htMiddle',\n          renderer = color_renderer) %>%\n        hot_rows(rowHeights = 40)\n    }\n  })\n  \n  # Point count -----------------------------------------------------------\n  \n  output$hot_pCount <- renderRHandsontable({\n    pCount <- values[['pCount']]\n    if(!is.null(pCount)){\n      rhandsontable(pCount, rowHeaders = NULL) %>%\n        hot_table(highlightRow = TRUE) %>%\n        hot_cols(\n          colWidths = c(100,100,120,120,120,120,120,100),\n          halign = 'htCenter',\n          valign = 'htMiddle',\n          renderer = color_renderer) %>%\n        hot_col('Interval', type = \"dropdown\", source = 1:3) %>%\n        hot_col('Detection', type = \"dropdown\", source = c('V', 'A', 'B')) %>%\n        hot_col('Species', type = \"dropdown\", source = choiceSpecies) %>%\n        hot_rows(rowHeights = 40)\n    }\n  })\n  \n  ###\n\n  ## Save \n  # observeEvent(input$save, {\n  #   finalDF <- isolate(values[[\"DF\"]])\n  #   saveRDS(finalDF, file=file.path(outdir, sprintf(\"%s.rds\", outfilename)))\n  # })\n  \n})\n\n\n\n## run app \nrunApp(list(ui=ui, server=server))\n\n",
    "created" : 1522149596937.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2145345616",
    "id" : "A0199940",
    "lastKnownWriteTime" : 1522100776,
    "last_content_update" : 1522100776,
    "path" : "C:/Users/Guest user/gits/neighborhoodNestwatch/gui/newGuiWork.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}