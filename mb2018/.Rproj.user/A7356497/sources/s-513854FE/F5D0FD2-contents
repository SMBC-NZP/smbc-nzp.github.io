# Setup -----------------------------------------------------------------------

library(RCurl)
library(lubridate)
library(unmarked)
library(raster)
library(rgeos)
library(tidyverse)

select <- dplyr::select

fileURLVWdata <- 
  getURL('https://raw.githubusercontent.com/SCBI-MigBirds/MigBirds/master/data/HBEF_2015_simulated.csv')

# read and wrangle point-count data:

occBirds <-
  read_csv(fileURLVWdata) %>%
  as_tibble(VWdata) %>%
  mutate(
    Species = str_trim(Species),
    Observer = str_trim(Observer),
    Date = as.Date(Date, "%m/%d/%Y")) %>%
  setNames(tolower(names(.))) %>%
  filter(distance == 1) %>%
  select(transect:wind, period, species, detectionmethod)
  
# Get a vector of unique sites (arranged by site):

sites <-
  occBirds_subset$plot %>%
  unique %>% 
  sort

# Spatial data wrangling  -----------------------------------------------------

setwd('C:/Users/Guest user/gits/smbc-nzp.github.io/MigBirds')

# Save the projection of the data so we can use it easily later:

UTM19N <-
  "+proj=utm +zone=19 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"

# Read in HBEF boundary and project into UTMs:

HBEF <-
  shapefile("spatial_layers/HBEFboundary_WGS84/HBEFboundary_WGS84.shp") %>%
  spTransform(CRS(UTM19N))

# Read in site locations, keep only the plots with counts, project:

SiteLocs <-
  shapefile("spatial_layers/SchwarzPlots_WGS84.shp") %>%
  subset(SCHWARZ_ID %in% sites) %>%
  spTransform(CRS(UTM19N))

# Read in digital elevation model to extract elevation and project:

DEM <-
  raster("spatial_layers/hb10mdem.txt") %>%
  projectRaster(crs=UTM19N)

# Generate site data from DEM and sites file:

siteData <-
  data_frame(
    plot = sites,
    elevation = extract(
      DEM, 
      SiteLocs
    ),
    aspect = extract(
      terrain(DEM, 'aspect'),
      SiteLocs
    ),
    slope = extract(
      terrain(DEM, 'slope'),
      SiteLocs
    )
  )

# Wrangle and write files  ----------------------------------------------------

# Set write directory:

writeDir <- 
  'C:/Users/Guest user/Dropbox (Smithsonian)/migBirds_course-2018/data/occupancy/'

# Site data:

write_csv(
  siteData, 
  paste0(writeDir, 'siteData.csv')
  )

# Observation covs:

write_csv(
  occBirds_subset %>%
    select(plot, replicate, date, time, observer, sky, wind) %>%
    filter(plot %in% siteData$plot) %>%
    distinct, 
  paste0(writeDir, 'observationData.csv')
)

# Count data:

write_csv(
  occBirds_subset %>%
    occBirds_subset %>%
    group_by(plot, replicate, date, period, species) %>%
    summarize(n = n()) %>%
    ungroup %>%
    arrange(plot, date, period, species) %>%
    filter(plot %in% siteData$plot),
  paste0(writeDir, 'countData.csv')
)

# Some more data fixes ----------------------------------------------------

# Plots with all 4 visits and no NA replicates:

goodPlots <-
  read_csv('https://www.dropbox.com/s/wuoqr96625co3ff/visitData.csv?dl=1') %>%
  filter(!plot %in% c(18,22)) %>%
  filter(!is.na(replicate)) %>%
  group_by(plot) %>% 
  summarize(n = length(unique(replicate))) %>%
  filter(n == 4) %>%
  .$plot

read_csv('https://www.dropbox.com/s/9cjty4lpvccf6ul/countData.csv?dl=1') %>%
  filter(plot %in% goodPlots) %>%
  write_csv(
    paste0(writeDir, 'countData.csv')
  )

read_csv('https://www.dropbox.com/s/wuoqr96625co3ff/visitData.csv?dl=1') %>%
  filter(plot %in% goodPlots) %>%
  write_csv(
    paste0(writeDir, 'visitData.csv')
  )

read_csv('https://www.dropbox.com/s/bucbbsmhe4m42m7/siteData.csv?dl=1') %>%
  filter(plot %in% goodPlots) %>%
  write_csv(
    paste0(writeDir, 'siteData.csv')
  )

# Make unmarked frames ----------------------------------------------------

# Setup -------------------------------------------------------------------

library(unmarked)
library(tidyverse)


counts <- 
  read_csv('https://www.dropbox.com/s/9cjty4lpvccf6ul/countData.csv?dl=1')

visits <- 
  read_csv('https://www.dropbox.com/s/rz5ee9y1mfb1js5/visitData.csv?dl=1')

sites <-
  read_csv('https://www.dropbox.com/s/bucbbsmhe4m42m7/siteData.csv?dl=1')

# Make a long form detection frame for ovenbirds:

ovenCounts <- 
  counts %>%
  filter(species == 'OVEN') %>%
  select(plot, replicate) %>%
  mutate(n = 1) %>%
  distinct

# Reshape the detection frame into wide form (R x J; R = sites, J = detection)

detectionFrame <-
  visits %>%
  select(plot, replicate) %>%
  left_join(
    ovenCounts, 
    by = c('plot', 'replicate')) %>%
  distinct %>%
  spread(replicate, n,fill = 0) %>%
  select(-1) %>%
  as.matrix

# Ensure that the sites are only those in the observation frame:

siteCovs <-
  sites %>%
  filter(plot %in% visits$plot)


# Make a name list of obsCovs:

obsCovs <-
  list(
    observer = visits %>%
      select(plot, replicate, observer) %>%
      spread(replicate, observer),
    timeOfDay = visits %>%
      select(plot, replicate, time) %>%
      mutate(time = as.numeric(time)) %>%
      spread(replicate, time),
    dayOfYear = visits %>%
      select(plot, replicate, date) %>%
      mutate(date = yday(date)) %>%
      spread(replicate, date),
    sky = visits %>%
      select(plot, replicate, sky) %>%
      spread(replicate, sky),
    wind = visits %>%
      select(plot, replicate, wind) %>%
      spread(replicate, wind)
  )
